c 29
c 28
quit!
roll(finalroll)
c 28
roll(finalroll)
quit!
c 29
quit!
roll(finalroll)
roll(finalroll).
c 29
quit!
roll(finalroll).
c 29
c 39
quit!
roll(finalroll)
roll(finalroll).class
roll(finalroll).pop
roll(finalroll)
c 29
quit!
roll(finalroll)
c 29
quit!
roll(finalroll)
roll(finalroll).vals.pop
roll(finalroll).class
roll(finalroll)
c 27
quit!
roll(finalroll)
c 27
quit!
roll(finalroll)
c 29
quit!
werollin.rolls.pop
vals.pop
werollin.rolls
werollin.dicekeys
c 27
quit!
roll(finalroll)
vals
roll(finalroll)
c 28
quit!
nums.zip(werollin.rolls).map { |(x,y)| y.times {print x.sample} }.pop
nums.zip(werollin.rolls).map { |(x,y)| y.times {print x.sample} }
nums.zip(werollin.rolls).map { |(x,y)| y.times print x.sample }
nums.zip(werollin.rolls).each { |(x,y)| y.times {print x.sample}}
nums.zip(werollin.rolls).each { |(x,y)| y.times print x.sample }
nums.zip(werollin.rolls).map { |(x,y)| y.times print x.sample }
nums.zip(werollin.rolls).map { |x,y| y.times print x.sample }
nums.zip(werollin.rolls).each
nums.zip(werollin.rolls).each.class
nums.class
nums.zip(werollin.rolls).each
nums.zip(werollin.rolls).each| do |{x,y)| y.times{print x.sample}
nums.zip(werollin.rolls).each do |{x,y)| y.times{print x.sample}
nums.zip(werollin.rolls)
eval finalroll.each_slice(1).to_a.cla
eval finalroll.each_slice(1).to_a.class
eval finalroll.each_slice(1).class
eval finalroll.each_slice(1)
eval finalroll.to_e.each_slice(1)
eval finalroll.each_slice(1)
eval finalroll.each_slice
eval finalroll
finallroll
roll.vals
vals
roll(finalroll)
c 28
quit!
roll(finalroll)
c 28
quit!
roll(finalroll)
vals
c 28
quit!
5.times {|i| puts "cat"}
5.times {|x,y| puts [1,2].sample}
5.times {(x,y| puts [1,2].sample}
5.times {|(x,y)|puts [1,2].sample}
5.times {|(x,y)| [1,2].sample}
5.times {|(x,y)|} [1,2].sample
5.times {|(x,y)| [1,2].sample}
times {|(x,y)| [1,2].sample}.class
4.times {|(x,y)| [1,2].sample}
4.times([1,2].sample).class
4.times {|(x,y)| [1,2].sample}
4.times {|x,y| [1,2].sample}
4.times {[1,2].sample}
4.times{[1,2].sample}
4.times{([1,2].sample}
4.times([1,2].sample)
roll(finalroll)
n
c 19
roll(finalroll)
c 26
roll(finalroll)
quit!
3.times puts "1"
finalroll
roll(finalroll)
c 27
roll(finalroll)
quit!
roll(finalroll)
c 27
c 37
quit!
roll(finalroll)
roll(finalroll(
c 27
quit!
roll(finalroll)
c 27
quit!
finalroll
c 18
quit!
werollin.dicekeys
nums
n
c 11
quit!
@dicekeys
werollin.@dicekeys
werollin.dicekeys
roll nums
nums.zip(werollin.rolls)
werollin.dicekeys
nums
c 16
quit
werollin.dicekeys
werollin.match
werollin.dicekeys
dice
werollin.rolls
werollin.dicekeys
werollin.input
n
quit!
werollin.countrolls;puts"#{werollin.rolls.size}"
werollin.countrolls;puts"#{werollin.rolls}"
werollin.countdice | werollin.match; werollin.countrolls; puts "#{werollin.rolls}"
werollin.countdice | werollin.match; werollin.countrolls; puts "{werollin.rolls}"
werollin.countdice | werollin.match; werollin.countrolls 
werollin.countdice | werollin.match; puts "#{werollin.dicekeys}"
werollin.countdice | werollin.match | puts "{werollin.dicekeys}"
werollin.countdice | werollin.match | puts "#{werollin.dicekeys}"
werollin.countdice | werollin.match
werollin.countdice | werollin.map
werollin.countdice;werollin.match;puts "#{werollin.dicekeys}"
werollin.countrolls;werollin.match;puts "#{werollin.dicekeys}"
werollin.countrolls;werollin.match
werollin.match
werollin.countrolls
 # end
 #   end
 #     puts result
 #      result << y.times x.sample
 #   arr.each do |(x,y)|
 #   result=[]
 # endtc # def roll
 #   end
 #     puts result
 #      result << y.times x.sample
 #   arr.each do |(x,y)|
 #   result=[]
werollin.m # def roll
werollin.countrolls
puts "#{werollin.dicekeys.zip(werollin.rolls)}"
werollin.dicekeys.zip(werollin.rolls)
werollin.countrolls;puts "#{werollin.rolls}"
c 11
quit!
werollin.match
eval werollin.countdice;puts "#{werollin.dicekeys}"
c 11
quit!
eval werollin.countdice;puts "#{werollin.dicekeys}"
c 11
quit!
eval werollin.countdice;puts "#{werollin.dicekeys}"
c 11
quit!
werollin.input
eval werollin.countdice;puts "#{werollin.dicekeys}"
eval werollin.dicekeys
eval werollin.countdice;puts werollin.dicekeys
eval werollin.countdice;puts dicekeys
eval werollin.countdice
eval werollin.coundice
puts werollin.dicekeys
puts dicekeys
werollin.countdice
c 11
quit!
werollin.input.index("3").class
werollin.input.index("3")
werollin.input
werollin.input[1].index
werollin.input.index(1)
werollin.input.index(1).class
werollin.input[1].class
werollin.input
c 11
werollin.input[1]
quit
werollin.countdice
c 11
quit!
werollin.countdice
werollin.input[1].class
werollin.countdice
werollin.input[1].class
werollin.input[i].class
werollin.countdice
c 11
quit!
werollin.input[1]
werollin.input
werollin.input(i)
werollin.input(1).index
werollin.input.(1)
werollin.input.index(1)
werollin.input.index(0)
werollin.input.index
@input.index
werollin.countdice;puts "#{werollin.dicekeys}"
werollin.countdice;puts "@{werollin.dicekeys}"
werollin.countdice;puts werollin.dicekeys
puts 1
werollin.countdice
c 11
n
c
quit!
werollin.countdice;puts werollin.dicekeys
werollin.countdice;puts dicekeys
return werollin.countdice
werollin.countdice
c 11
c 13
c
n
c 13
c 16
